package cn.wgt.dao;

//import cn.mofeng.test.CodeTools;
import cn.wgt.bean.User;
import cn.wgt.util.UtilTools;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;

/**
 * @author cn.wgt
 */
@Repository("userDao")
public class UserDao {
    @Resource(name = "jdbcTemplate")
    private JdbcTemplate jdbcTemplate;

    @Resource(name = "namedJdbcTemplate")
    private NamedParameterJdbcTemplate namedJdbcTemplate;


    /**
     * 新建一个User
     *
     * @param user 新建的User信息
     * @return
     */
    public void insertUser(User user) {
        String sql = "INSERT INTO user(account,password,secret_question_answer) " +
                "VALUES(:account,:password,:secretQA)";
        namedJdbcTemplate.update(sql, new BeanPropertySqlParameterSource(user));
    }


    public boolean checkUserExist(String account) {
        String sql = "SELECT count(1) FROM user WHERE account=?";
        return jdbcTemplate.queryForObject(sql, Integer.class, account) > 0;
    }

    /**
     * 根据username查找user
     *
     * @param account 查找的用户名
     * @return
     */
    public User queryUserByAccount(String account) {                //modified by cn.wgt
        String sql = "SELECT * FROM user  WHERE account=?";
        return jdbcTemplate.queryForObject(sql,
                BeanPropertyRowMapper.newInstance(User.class),
                account);
    }

//****************************************************************************************


    /**
     * 是否对当前用户设置关注列表
     * @param account
     * @return
     */
    public boolean checkConcernUsersExist(String account) {
        String sql = "SELECT count(1) FROM concern_users WHERE account=?";
        return jdbcTemplate.queryForObject(sql, Integer.class, account) > 0;
    }

    /**是否对当前用户设置了被关注列表
     * @param account
     * @return
     */
    public boolean checkConcernedUsersExist(String account) {
        String sql = "SELECT count(1) FROM concerned_users WHERE account=?";
        return jdbcTemplate.queryForObject(sql, Integer.class, account) > 0;
    }

    /**
     * 创建一个用户的关注记录
     * @param account
     * @param concerningUser
     * @return
     */
    public int insertConcerningUser(String account,String concerningUser){
        String sql="INSERT INTO concern_users(account,users)" +
                "VALUES(?,?)";
        return  jdbcTemplate.update(sql,account,concerningUser);

    }
    /**
     * 创建一个用户的关注记录
     * @param account
     * @param concernedUser  关注当前用户的用户
     * @return
     */
    public int insertConcernedUser(String account,String concernedUser){
        String sql="INSERT INTO concerned_users(account,users)" +
                "VALUES(?,?)";
        return  jdbcTemplate.update(sql,account,concernedUser);

    }
    /**
     * 从关注表中查询某一用户的关注用户
     * @param account
     * @return 以字符串格式返回
     */
    public String queryConcerningUser(String account){
        String sql="SELECT users FROM concern_users WHERE account=?";
        return jdbcTemplate.queryForObject(sql,String.class,account);
    }
    /**
     * 从关注表中查询某一用户的关注用户
     * @param account
     * @return 以字符串格式返回
     */
    public String queryConcernedUser(String account){
        String sql="SELECT users FROM concerned_users WHERE account=?";
        return jdbcTemplate.queryForObject(sql,String.class,account);
    }

    /**添加新的关注用户
     * @param account
     * @param concerningUser
     * @return
     */
    public int addConcerningUser(String account,String concerningUser){
        String sql="UPDATE concern_users SET users=?"+
                "WHERE account=?";
        String users=queryConcerningUser(account)+","+concerningUser;
        return jdbcTemplate.update(sql,users,account);
    }
    /**被新的用户关注
     * @param account  当前用户
     * @param concernedUser    被哪个用户关注的
     * @return
     */
    public int addConcernedUser(String account,String concernedUser){
        String sql="UPDATE concerned_users SET users=?"+
                "WHERE account=?";
        String users=queryConcernedUser(account)+","+concernedUser;
        return jdbcTemplate.update(sql,users,account);
    }


    /**
     * 取消关注，关注列表操作
     * @param account
     * @param concerningUser
     * @return
     */
    public int cancelConcerningUser( String account,String concerningUser){
        String sql="UPDATE concern_users SET users=?"+
                "WHERE account=?";
        String users=queryConcerningUser(account);
        int index=users.indexOf(concerningUser);
        String str;
        str = UtilTools.getString(concerningUser, users, index);
        if(str.equals("")){
            String del_sql="DELETE FROM concern_users WHERE account=?";
            jdbcTemplate.update(del_sql,account);
        }
        return jdbcTemplate.update(sql,str,account);
    }


    /**取消关注，被关注列表处理
     * @param account
     * @param concernedUser
     * @return
     */
    public int cancelConcernedUser( String account,String concernedUser){
        String sql="UPDATE concerned_users SET users=?"+
                "WHERE account=?";
        String users=queryConcernedUser(account);
        int index=users.indexOf(concernedUser);
        String str = UtilTools.getString(concernedUser, users, index);
        if(str.equals("")){
            String del_sql="DELETE FROM concerned_users WHERE account=?";
            jdbcTemplate.update(del_sql,account);
        }
        return jdbcTemplate.update(sql,str,account);
    }

    //****************热度*********************
    public boolean checkReduExist(String doubleAccounts){
//        System.out.println(doubleAccounts);
        String sql = "SELECT count(1) FROM redu WHERE double_accounts=?";
        return jdbcTemplate.queryForObject(sql, Integer.class, doubleAccounts) == 1;
    }
    public void insertRecordIntoRedu(String doubleAccounts,int degree){
        String sql = "INSERT INTO redu(double_accounts,degrees) " +
                "VALUES(?,?)";
        jdbcTemplate.update(sql,doubleAccounts,degree);
    }
    public int queryForDegrees(String doubleAccounts){
        String sql="SELECT degrees FROM redu WHERE double_accounts=?";
        return jdbcTemplate.queryForObject(sql,Integer.class,doubleAccounts);
    }
    public void updateRedu(String doubleAccounts,int degrees){
//        System.out.println(doubleAccounts+"redu:"+degrees);

        String sql="UPDATE  redu SET degrees=? WHERE double_accounts=?";
        if(degrees==0){
            jdbcTemplate.update(sql,degrees,doubleAccounts);  //热度清零
        }else{
            jdbcTemplate.update(sql,queryForDegrees(doubleAccounts)+degrees,doubleAccounts);
        }
    }
    public void deleteRedu(String doubleAccounts){
        String sql="DELETE FROM redu WHERE double_accounts=?";
        jdbcTemplate.update(sql,doubleAccounts);
    }
    public Object queryAllRecordsFromRedu(){
        String sql="SELECT * FROM redu";
        return jdbcTemplate.queryForList(sql);
    }

    //*****************************dating-process**************
    public Boolean checkDatingProcessExist(String account){
        String sql = "SELECT count(1) FROM dating_process WHERE account=?";
        return jdbcTemplate.queryForObject(sql, Integer.class, account) > 0;
    }
    public void upDateDatingProcessInfo(String account,String redu20,String redu40,String redu60,String redu80){
        String sql="UPDATE  dating_process SET redu20=?,redu40=?,redu60=?,redu80=? WHERE account=?";
        jdbcTemplate.update(sql,redu20,redu40,redu60,redu80,account);
    }
    public void insertDatingProcessInfo(String account,String redu20,String redu40,String redu60,String redu80){
        String sql = "INSERT INTO dating_process(account,redu_20,redu_40,redu_60,redu_80) " +
                "VALUES(?,?,?,?,?)";
        jdbcTemplate.update(sql,account,redu20,redu40,redu60,redu80);
    }
    public Object queryDatingProcessInfo(String account){
        String sql = "SELECT redu_20,redu_40,redu_60,redu_80 FROM dating_process  WHERE account=?";
        return jdbcTemplate.queryForMap(sql,account);
    }
}
